{"version":3,"file":"index.cjs","sources":["../src/types/scrollmeter.types.ts","../src/class/scrollmeter-tooltip.ts","../src/class/scrollmeter-timeline.ts","../src/class/scrollmeter.ts","../src/index.ts"],"sourcesContent":["export interface ScrollmeterTimelineOptions {\n  color?: string\n  width?: number\n}\n\nexport interface ScrollmeterBarOptions {\n  color?: string\n  background?: string\n  height?: number\n}\n\nexport interface ScrollmeterTooltipOptions {\n  background?: string\n  fontColor?: string\n  fontSize?: number\n  paddingBlock?: number\n  paddingInline?: number\n  width?: number\n}\n\nexport interface ScrollmeterOptions {\n  targetId: string\n  useTimeline?: boolean\n  useTooltip?: boolean\n  usePreview?: boolean\n  barOptions?: ScrollmeterBarOptions\n  timelineOptions?: ScrollmeterTimelineOptions\n  tooltipOptions?: ScrollmeterTooltipOptions\n}\n\nexport abstract class IScrollmeter {\n  protected abstract setCSSCustomProperties(): void\n}\n","import { IScrollmeter } from '../types/scrollmeter.types'\nimport { Scrollmeter } from './scrollmeter'\nimport styles from '../styles/scrollmeter.module.scss'\n\nexport class ScrollmeterTooltip extends IScrollmeter {\n    #scrollmeter: Scrollmeter\n\n    constructor(scrollmeter: Scrollmeter) {\n        super()\n        this.#scrollmeter = scrollmeter\n    }\n\n    #cropImageAtPercent = (targetElement: HTMLElement, cropWidth: number = 320) => {\n        const captureCanvas = this.#scrollmeter.getCaptureCanvas()\n        if (!captureCanvas) return\n\n        const canvasWidth = captureCanvas.width\n        const canvasHeight = (canvasWidth * 9) / 16 // 16:9 비율 계산\n        const y = Math.max(0, targetElement.getBoundingClientRect().top + window.scrollY - canvasHeight / 2)\n\n        const cropHeight = (cropWidth * 9) / 16 // 16:9 비율 계산\n\n        const tempCanvas = document.createElement('canvas')\n        tempCanvas.width = cropWidth\n        tempCanvas.height = cropHeight\n\n        const ctx = tempCanvas.getContext('2d')\n        if (!ctx) return null\n\n        // 크롭된 영역 그리기\n        ctx.drawImage(\n            captureCanvas,\n            0,\n            Math.max(0, Math.min(y, captureCanvas.height - canvasHeight)), // y값 범위 제한\n            canvasWidth,\n            canvasHeight,\n            0,\n            0,\n            cropWidth,\n            cropHeight\n        )\n\n        return tempCanvas.toDataURL()\n    }\n\n    #createPreview = (dataUrl: string) => {\n        const div = document.createElement('div')\n        div.classList.add(styles.scrollmeter_timeline_preview)\n\n        const img = new Image()\n\n        img.src = dataUrl\n\n        div.appendChild(img)\n        return div\n    }\n\n    public createTimelineTooltip = (\n        timelineElement: HTMLDivElement,\n        targetElement: HTMLElement,\n        direction: 'left' | 'right' | 'center'\n    ) => {\n        if (!targetElement.textContent) return\n        const timelineTooltip = document.createElement('div')\n        const timelineTooltipText = document.createElement('p')\n\n        if (this.#scrollmeter.getDefaultOptions().usePreview) {\n            const dataUrl = this.#cropImageAtPercent(targetElement)\n\n            if (dataUrl) {\n                const preview = this.#createPreview(dataUrl)\n                timelineTooltip.appendChild(preview)\n            }\n        }\n\n        timelineTooltip.classList.add(styles.scrollmeter_timeline_tooltip)\n        timelineTooltip.classList.add(styles[`scrollmeter_timeline_tooltip_${direction}`])\n\n        timelineTooltipText.textContent = targetElement.textContent\n\n        timelineTooltip.appendChild(timelineTooltipText)\n\n        this.setCSSCustomProperties()\n\n        timelineElement.appendChild(timelineTooltip)\n    }\n\n    protected setCSSCustomProperties() {\n        const defaultOptions = this.#scrollmeter.getDefaultOptions()\n\n        // css custom\n        if (defaultOptions && defaultOptions.tooltipOptions) {\n            const { background, fontColor, fontSize, paddingBlock, paddingInline, width } = defaultOptions.tooltipOptions\n\n            if (background) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-background', background)\n            }\n            if (fontColor) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-font-color', fontColor)\n            }\n            if (fontSize) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-font-size', `${fontSize}px`)\n            }\n            if (paddingBlock) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-padding-block', `${paddingBlock}px`)\n            }\n            if (paddingInline) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-padding-inline', `${paddingInline}px`)\n            }\n            if (width) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-width', `${width}px`)\n            }\n        }\n    }\n}\n","import { IScrollmeter } from '../types/scrollmeter.types'\nimport { Scrollmeter } from './scrollmeter'\nimport { ScrollmeterTooltip } from './scrollmeter-tooltip'\nimport styles from '../styles/scrollmeter.module.scss'\n\nexport class ScrollmeterTimeline extends IScrollmeter {\n    #scrollmeter: Scrollmeter\n\n    constructor(scrollmeter: Scrollmeter) {\n        super()\n        this.#scrollmeter = scrollmeter\n    }\n\n    #findTimelineElements = (element: HTMLElement): HTMLElement[] => {\n        const elArray: HTMLElement[] = []\n\n        const searchH1 = (el: HTMLElement) => {\n            if (el.tagName.toLowerCase() === 'h1') {\n                if (this.#isElementVisible(el)) {\n                    elArray.push(el as HTMLHeadingElement)\n                }\n            }\n\n            Array.from(el.children).forEach((child) => {\n                searchH1(child as HTMLElement)\n            })\n        }\n\n        searchH1(element)\n\n        return elArray\n    }\n\n    #isElementVisible(element: HTMLElement): boolean {\n        // 요소 자체나 부모 요소들의 style 체크\n        const style = window.getComputedStyle(element)\n        if (style.display === 'none') return false\n        if (style.visibility === 'hidden') return false\n        if (style.opacity === '0') return false\n\n        // 부모 요소들도 순차적으로 확인\n        let currentElement: HTMLElement | null = element.parentElement\n        while (currentElement) {\n            const parentStyle = window.getComputedStyle(currentElement)\n            if (parentStyle.display === 'none') return false\n            if (parentStyle.visibility === 'hidden') return false\n            if (parentStyle.opacity === '0') return false\n            currentElement = currentElement.parentElement\n        }\n\n        return true\n    }\n\n    public createTimeline = (highestZIndex: number): HTMLElement[] => {\n        const targetContainer = this.#scrollmeter.getTargetContainer()\n        if (!targetContainer) return []\n\n        const targetElement = this.#findTimelineElements(targetContainer)\n\n        if (targetElement.length === 0) return []\n\n        const timelineElements: HTMLElement[] = []\n\n        targetElement.map((element) => {\n            const scrollContainer = this.#scrollmeter.getTargetContainer()\n\n            if (!scrollContainer) return\n\n            const timelineElement = document.createElement('div')\n            timelineElement.classList.add(styles.scrollmeter_timeline)\n\n            const absoluteElementTop = element.getBoundingClientRect().top + window.scrollY\n            const absoluteContainerTop = scrollContainer.getBoundingClientRect().top + window.scrollY\n            const relativeTargetTop = absoluteElementTop - absoluteContainerTop\n            const scrollableHeight = scrollContainer.clientHeight - document.documentElement.clientHeight\n\n            if (scrollableHeight > absoluteElementTop) {\n                const relativePosition = (relativeTargetTop / scrollableHeight) * 100\n\n                console.log(\n                    scrollContainer.clientHeight,\n                    document.documentElement.clientHeight,\n                    scrollContainer.clientHeight - document.documentElement.clientHeight,\n                    absoluteElementTop,\n                    absoluteContainerTop,\n                    relativeTargetTop,\n                    relativePosition\n                )\n                const width = this.#scrollmeter.getDefaultOptions().timelineOptions?.width ?? 4\n\n                timelineElement.style.left = `${relativePosition > 100 ? `calc(100% - ${width}px)` : `${relativePosition}%`}`\n                timelineElement.style.zIndex = highestZIndex.toString()\n\n                timelineElement.addEventListener('click', () => {\n                    element.scrollIntoView({ behavior: 'smooth' })\n                })\n\n                if (this.#scrollmeter.getDefaultOptions().useTooltip) {\n                    const tooltip = new ScrollmeterTooltip(this.#scrollmeter)\n\n                    tooltip.createTimelineTooltip(\n                        timelineElement,\n                        element,\n                        relativePosition < 7.6 ? 'left' : relativePosition > 92.4 ? 'right' : 'center'\n                    )\n                }\n\n                this.#scrollmeter.getScrollmeterContainer()?.appendChild(timelineElement)\n                timelineElements.push(timelineElement)\n            }\n        })\n\n        this.setCSSCustomProperties()\n\n        return timelineElements\n    }\n\n    protected setCSSCustomProperties() {\n        const defaultOptions = this.#scrollmeter.getDefaultOptions()\n        // css custom\n        if (defaultOptions && defaultOptions.timelineOptions) {\n            const { color, width } = defaultOptions.timelineOptions\n\n            if (color) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-timeline-color', color)\n            }\n            if (width) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-timeline-width', `${width}px`)\n            }\n        }\n    }\n}\n","import html2canvas from 'html2canvas'\nimport { IScrollmeter, ScrollmeterOptions } from '../types/scrollmeter.types'\nimport styles from '../styles/scrollmeter.module.scss'\nimport { ScrollmeterTimeline } from './scrollmeter-timeline'\n\nexport class Scrollmeter extends IScrollmeter {\n    #defaultOptions: ScrollmeterOptions\n    #targetContainer: HTMLElement | null\n    #scrollmeterContainer: HTMLDivElement | null\n    #scrollmeterBar: HTMLDivElement | null\n    #resizeObserver: ResizeObserver | null\n\n    #timelineElements: HTMLElement[]\n\n    #captureCanvas: HTMLCanvasElement | null\n\n    #containerHeight: number\n    #barWidth: number\n    #totalHeight: number\n    #elementTop: number\n    #highestZIndex: number\n\n    constructor(options: ScrollmeterOptions) {\n        super()\n        const { targetId } = options\n        this.#defaultOptions = options\n\n        this.#targetContainer = document.getElementById(targetId) ?? null\n        this.#scrollmeterContainer = null\n        this.#scrollmeterBar = null\n        this.#resizeObserver = null\n        this.#captureCanvas = null\n\n        this.#timelineElements = []\n\n        // 숫자 필드 초기화\n        this.#containerHeight = 0\n        this.#barWidth = 0\n        this.#totalHeight = 0\n        this.#elementTop = 0\n        this.#highestZIndex = 0\n\n        this.#initResizeObserver()\n    }\n\n    #initResizeObserver = () => {\n        if (!this.#targetContainer) {\n            throw new Error('targetContainer is not found')\n        }\n\n        this.#resizeObserver = new ResizeObserver(async (entries) => {\n            if (!this.#targetContainer) return\n\n            if (!this.#scrollmeterContainer || this.#containerHeight === entries[0].contentRect.height) return\n\n            this.#containerHeight = entries[0].contentRect.height\n\n            const marginTop = parseInt(window.getComputedStyle(this.#targetContainer).marginTop)\n            const marginBottom = parseInt(window.getComputedStyle(this.#targetContainer).marginBottom)\n            this.#elementTop = window.scrollY + this.#targetContainer.getBoundingClientRect().top\n            this.#totalHeight = this.#targetContainer.clientHeight + marginTop + marginBottom - document.documentElement.clientHeight\n\n            this.#updateBarWidth()\n\n            if (this.#defaultOptions.useTimeline) {\n                document.querySelectorAll(`.${styles.scrollmeter_timeline}`).forEach((element) => {\n                    element.remove()\n                })\n\n                if (this.#defaultOptions.usePreview) {\n                    await this.#captureContainer()\n                }\n\n                const timeline = new ScrollmeterTimeline(this)\n\n                this.#timelineElements = timeline.createTimeline(this.#highestZIndex)\n            }\n        })\n    }\n\n    #createScrollmeterContainer = () => {\n        try {\n            if (!this.#targetContainer) throw new Error('targetContainer is not found')\n\n            const scrollmeterContainer = document.createElement('div') as HTMLDivElement\n            scrollmeterContainer.classList.add(styles.scrollmeter_container)\n\n            const highestZIndex = this.#findHighestZIndex(this.#targetContainer)\n            this.#highestZIndex = highestZIndex\n            scrollmeterContainer.style.zIndex = highestZIndex.toString()\n\n            const scrollmeterBar = this.#createScrollmeterBar()\n            scrollmeterContainer.appendChild(scrollmeterBar)\n\n            this.#scrollmeterContainer = scrollmeterContainer\n\n            this.setCSSCustomProperties()\n\n            return scrollmeterContainer\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    #createScrollmeterBar = () => {\n        const scrollmeterBar = document.createElement('div')\n        scrollmeterBar.classList.add(styles.scrollmeter_bar)\n\n        this.#scrollmeterBar = scrollmeterBar\n\n        return scrollmeterBar\n    }\n\n    #findHighestZIndex = (element: HTMLElement) => {\n        let highest = 0\n\n        const zIndex = window.getComputedStyle(element).zIndex\n\n        if (zIndex !== 'auto') {\n            highest = Math.max(highest, parseInt(zIndex))\n        }\n\n        Array.from(element.children).forEach((child) => {\n            highest = Math.max(highest, this.#findHighestZIndex(child as HTMLElement))\n        })\n\n        return highest + 1\n    }\n\n    #updateBarWidth = () => {\n        if (!this.#targetContainer) return\n        const isVisibleScrollmeter = this.#isVisibleScrollmeter()\n\n        if (!isVisibleScrollmeter) {\n            this.#scrollmeterContainer!.style.opacity = '0'\n            return\n        }\n\n        this.#scrollmeterContainer!.style.opacity = '1'\n\n        const currentScroll = window.scrollY - this.#elementTop\n        const scrollPercentage = (currentScroll / this.#totalHeight) * 100\n\n        this.#barWidth = Math.min(100, Math.max(0, scrollPercentage))\n\n        if (this.#scrollmeterBar) {\n            this.#scrollmeterBar.style.width = `${this.#barWidth}%`\n        }\n    }\n\n    #isVisibleScrollmeter = () => {\n        if (!this.#targetContainer) return false\n\n        return this.#targetContainer.getBoundingClientRect().top < 0 && this.#targetContainer.getBoundingClientRect().bottom > 0\n    }\n\n    #captureContainer = async () => {\n        if (!this.#targetContainer) return\n\n        try {\n            const canvas = await html2canvas(document.documentElement, {\n                ignoreElements: (element) => {\n                    const ignoreClasses = [styles.scrollmeter_container]\n                    return ignoreClasses.some((className) => element.classList.contains(className))\n                },\n            })\n\n            this.#captureCanvas = canvas\n        } catch (error) {\n            console.error('미리보기를 생성하는 중 오류가 발생했습니다:', error)\n        }\n    }\n\n    protected setCSSCustomProperties = () => {\n        if (!this.#scrollmeterContainer) return\n        // css custom\n        if (this.#defaultOptions.barOptions) {\n            const { color, background, height } = this.#defaultOptions.barOptions\n            if (color) {\n                this.#scrollmeterContainer.style.setProperty('--scrollmeter-bar-color', color)\n            }\n            if (background) {\n                this.#scrollmeterContainer.style.setProperty('--scrollmeter-bar-background', background)\n            }\n            if (height) {\n                this.#scrollmeterContainer.style.setProperty('--scrollmeter-bar-height', `${height}px`)\n            }\n        }\n    }\n\n    public createScrollmeter = () => {\n        try {\n            if (!this.#targetContainer) throw new Error('targetContainer is not found')\n\n            const existingScrollmeter = document.querySelectorAll(`.${styles.scrollmeter_container}`)\n\n            if (existingScrollmeter.length > 0) {\n                return null\n            }\n\n            if (!this.#resizeObserver) {\n                throw new Error('resizeObserver is not found')\n            }\n\n            const container = this.#createScrollmeterContainer()\n\n            if (!container) throw new Error('scrollmetercontainer is not found')\n\n            this.#targetContainer.appendChild(container)\n\n            this.#resizeObserver.observe(this.#targetContainer)\n\n            window.addEventListener('scroll', this.#updateBarWidth)\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    public getTargetContainer = () => {\n        return this.#targetContainer\n    }\n\n    public getScrollmeterContainer = () => {\n        return this.#scrollmeterContainer\n    }\n\n    public getCaptureCanvas = () => {\n        return this.#captureCanvas || null\n    }\n\n    public getDefaultOptions = () => {\n        return this.#defaultOptions\n    }\n}\n","import { Scrollmeter } from './class/scrollmeter'\nimport { ScrollmeterOptions } from './types/scrollmeter.types'\n\nexport const createScrollmeter = (options: ScrollmeterOptions) => {\n    const scrollmeter = new Scrollmeter(options)\n    scrollmeter.createScrollmeter()\n}\n"],"names":["IScrollmeter","ScrollmeterTooltip","scrollmeter","__privateAdd","_scrollmeter","_cropImageAtPercent","_createPreview","__privateSet","targetElement","cropWidth","captureCanvas","__privateGet","canvasWidth","canvasHeight","y","cropHeight","tempCanvas","ctx","dataUrl","div","styles","img","timelineElement","direction","timelineTooltip","timelineTooltipText","preview","defaultOptions","background","fontColor","fontSize","paddingBlock","paddingInline","width","_a","_b","_c","_d","_e","_f","ScrollmeterTimeline","_ScrollmeterTimeline_instances","_findTimelineElements","element","elArray","searchH1","el","__privateMethod","isElementVisible_fn","child","highestZIndex","targetContainer","timelineElements","scrollContainer","absoluteElementTop","absoluteContainerTop","relativeTargetTop","scrollableHeight","relativePosition","color","style","currentElement","parentStyle","Scrollmeter","options","_defaultOptions","_targetContainer","_scrollmeterContainer","_scrollmeterBar","_resizeObserver","_timelineElements","_captureCanvas","_containerHeight","_barWidth","_totalHeight","_elementTop","_highestZIndex","_initResizeObserver","_createScrollmeterContainer","_createScrollmeterBar","_findHighestZIndex","_updateBarWidth","_isVisibleScrollmeter","_captureContainer","entries","marginTop","marginBottom","timeline","scrollmeterContainer","scrollmeterBar","error","highest","zIndex","scrollPercentage","canvas","html2canvas","className","height","container","targetId","createScrollmeter"],"mappings":"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"}