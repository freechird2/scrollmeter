{"version":3,"file":"index.mjs","sources":["../src/types/scrollmeter.types.ts","../src/class/scrollmeter-tooltip.ts","../src/class/scrollmeter-timeline.ts","../src/class/scrollmeter.ts","../src/index.ts"],"sourcesContent":["export interface ScrollmeterTimelineOptions {\n  color?: string\n  width?: number\n}\n\nexport interface ScrollmeterBarOptions {\n  color?: string\n  background?: string\n  height?: number\n}\n\nexport interface ScrollmeterTooltipOptions {\n  background?: string\n  fontColor?: string\n  fontSize?: number\n  paddingBlock?: number\n  paddingInline?: number\n  width?: number\n}\n\nexport interface ScrollmeterOptions {\n  targetId: string\n  useTimeline?: boolean\n  useTooltip?: boolean\n  usePreview?: boolean\n  barOptions?: ScrollmeterBarOptions\n  timelineOptions?: ScrollmeterTimelineOptions\n  tooltipOptions?: ScrollmeterTooltipOptions\n}\n\nexport abstract class IScrollmeter {\n  protected abstract setCSSCustomProperties(): void\n}\n","import { IScrollmeter } from '../types/scrollmeter.types'\nimport { Scrollmeter } from './scrollmeter'\nimport styles from '../styles/scrollmeter.module.scss'\n\nexport class ScrollmeterTooltip extends IScrollmeter {\n    #scrollmeter: Scrollmeter\n\n    constructor(scrollmeter: Scrollmeter) {\n        super()\n        this.#scrollmeter = scrollmeter\n    }\n\n    #cropImageAtPercent = (targetElement: HTMLElement, cropWidth: number = 320) => {\n        const captureCanvas = this.#scrollmeter.getCaptureCanvas()\n        if (!captureCanvas) return\n\n        const canvasWidth = captureCanvas.width\n        const canvasHeight = (canvasWidth * 9) / 16 // 16:9 비율 계산\n        const y = Math.max(0, targetElement.getBoundingClientRect().top + window.scrollY - canvasHeight / 2)\n\n        const cropHeight = (cropWidth * 9) / 16 // 16:9 비율 계산\n\n        const tempCanvas = document.createElement('canvas')\n        tempCanvas.width = cropWidth\n        tempCanvas.height = cropHeight\n\n        const ctx = tempCanvas.getContext('2d')\n        if (!ctx) return null\n\n        // 크롭된 영역 그리기\n        ctx.drawImage(\n            captureCanvas,\n            0,\n            Math.max(0, Math.min(y, captureCanvas.height - canvasHeight)), // y값 범위 제한\n            canvasWidth,\n            canvasHeight,\n            0,\n            0,\n            cropWidth,\n            cropHeight\n        )\n\n        return tempCanvas.toDataURL()\n    }\n\n    #createPreview = (dataUrl: string) => {\n        const div = document.createElement('div')\n        div.classList.add(styles.scrollmeter_timeline_preview)\n\n        const img = new Image()\n\n        img.src = dataUrl\n\n        div.appendChild(img)\n        return div\n    }\n\n    public createTimelineTooltip = (\n        timelineElement: HTMLDivElement,\n        targetElement: HTMLElement,\n        direction: 'left' | 'right' | 'center'\n    ) => {\n        if (!targetElement.textContent) return\n        const timelineTooltip = document.createElement('div')\n        const timelineTooltipText = document.createElement('p')\n\n        if (this.#scrollmeter.getDefaultOptions().usePreview) {\n            const dataUrl = this.#cropImageAtPercent(targetElement)\n\n            if (dataUrl) {\n                const preview = this.#createPreview(dataUrl)\n                timelineTooltip.appendChild(preview)\n            }\n        }\n\n        timelineTooltip.classList.add(styles.scrollmeter_timeline_tooltip)\n        timelineTooltip.classList.add(styles[`scrollmeter_timeline_tooltip_${direction}`])\n\n        timelineTooltipText.textContent = targetElement.textContent\n\n        timelineTooltip.appendChild(timelineTooltipText)\n\n        this.setCSSCustomProperties()\n\n        timelineElement.appendChild(timelineTooltip)\n    }\n\n    protected setCSSCustomProperties() {\n        const defaultOptions = this.#scrollmeter.getDefaultOptions()\n\n        // css custom\n        if (defaultOptions && defaultOptions.tooltipOptions) {\n            const { background, fontColor, fontSize, paddingBlock, paddingInline, width } = defaultOptions.tooltipOptions\n\n            if (background) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-background', background)\n            }\n            if (fontColor) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-font-color', fontColor)\n            }\n            if (fontSize) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-font-size', `${fontSize}px`)\n            }\n            if (paddingBlock) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-padding-block', `${paddingBlock}px`)\n            }\n            if (paddingInline) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-padding-inline', `${paddingInline}px`)\n            }\n            if (width) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-tooltip-width', `${width}px`)\n            }\n        }\n    }\n}\n","import { IScrollmeter } from '../types/scrollmeter.types'\nimport { Scrollmeter } from './scrollmeter'\nimport { ScrollmeterTooltip } from './scrollmeter-tooltip'\nimport styles from '../styles/scrollmeter.module.scss'\n\nexport class ScrollmeterTimeline extends IScrollmeter {\n    #scrollmeter: Scrollmeter\n\n    constructor(scrollmeter: Scrollmeter) {\n        super()\n        this.#scrollmeter = scrollmeter\n    }\n\n    #findTimelineElements = (element: HTMLElement): HTMLElement[] => {\n        const elArray: HTMLElement[] = []\n\n        const searchH1 = (el: HTMLElement) => {\n            if (el.tagName.toLowerCase() === 'h1') {\n                if (this.#isElementVisible(el)) {\n                    elArray.push(el as HTMLHeadingElement)\n                }\n            }\n\n            Array.from(el.children).forEach((child) => {\n                searchH1(child as HTMLElement)\n            })\n        }\n\n        searchH1(element)\n\n        return elArray\n    }\n\n    #isElementVisible(element: HTMLElement): boolean {\n        // 요소 자체나 부모 요소들의 style 체크\n        const style = window.getComputedStyle(element)\n        if (style.display === 'none') return false\n        if (style.visibility === 'hidden') return false\n        if (style.opacity === '0') return false\n\n        // 부모 요소들도 순차적으로 확인\n        let currentElement: HTMLElement | null = element.parentElement\n        while (currentElement) {\n            const parentStyle = window.getComputedStyle(currentElement)\n            if (parentStyle.display === 'none') return false\n            if (parentStyle.visibility === 'hidden') return false\n            if (parentStyle.opacity === '0') return false\n            currentElement = currentElement.parentElement\n        }\n\n        return true\n    }\n\n    public createTimeline = (highestZIndex: number): HTMLElement[] => {\n        const targetContainer = this.#scrollmeter.getTargetContainer()\n        if (!targetContainer) return []\n\n        const targetElement = this.#findTimelineElements(targetContainer)\n\n        if (targetElement.length === 0) return []\n\n        const timelineElements: HTMLElement[] = []\n\n        targetElement.map((element) => {\n            const scrollContainer = this.#scrollmeter.getTargetContainer()\n\n            if (!scrollContainer) return\n\n            const timelineElement = document.createElement('div')\n            timelineElement.classList.add(styles.scrollmeter_timeline)\n\n            const absoluteElementTop = element.getBoundingClientRect().top + window.scrollY\n            const absoluteContainerTop = scrollContainer.getBoundingClientRect().top + window.scrollY\n            const relativeTargetTop = absoluteElementTop - absoluteContainerTop\n            const scrollableHeight = scrollContainer.clientHeight - document.documentElement.clientHeight\n\n            if (scrollableHeight > absoluteElementTop) {\n                const relativePosition = (relativeTargetTop / scrollableHeight) * 100\n\n                console.log(\n                    scrollContainer.clientHeight,\n                    document.documentElement.clientHeight,\n                    scrollContainer.clientHeight - document.documentElement.clientHeight,\n                    absoluteElementTop,\n                    absoluteContainerTop,\n                    relativeTargetTop,\n                    relativePosition\n                )\n                const width = this.#scrollmeter.getDefaultOptions().timelineOptions?.width ?? 4\n\n                timelineElement.style.left = `${relativePosition > 100 ? `calc(100% - ${width}px)` : `${relativePosition}%`}`\n                timelineElement.style.zIndex = highestZIndex.toString()\n\n                timelineElement.addEventListener('click', () => {\n                    element.scrollIntoView({ behavior: 'smooth' })\n                })\n\n                if (this.#scrollmeter.getDefaultOptions().useTooltip) {\n                    const tooltip = new ScrollmeterTooltip(this.#scrollmeter)\n\n                    tooltip.createTimelineTooltip(\n                        timelineElement,\n                        element,\n                        relativePosition < 7.6 ? 'left' : relativePosition > 92.4 ? 'right' : 'center'\n                    )\n                }\n\n                this.#scrollmeter.getScrollmeterContainer()?.appendChild(timelineElement)\n                timelineElements.push(timelineElement)\n            }\n        })\n\n        this.setCSSCustomProperties()\n\n        return timelineElements\n    }\n\n    protected setCSSCustomProperties() {\n        const defaultOptions = this.#scrollmeter.getDefaultOptions()\n        // css custom\n        if (defaultOptions && defaultOptions.timelineOptions) {\n            const { color, width } = defaultOptions.timelineOptions\n\n            if (color) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-timeline-color', color)\n            }\n            if (width) {\n                this.#scrollmeter.getScrollmeterContainer()?.style.setProperty('--scrollmeter-timeline-width', `${width}px`)\n            }\n        }\n    }\n}\n","import html2canvas from 'html2canvas'\nimport { IScrollmeter, ScrollmeterOptions } from '../types/scrollmeter.types'\nimport styles from '../styles/scrollmeter.module.scss'\nimport { ScrollmeterTimeline } from './scrollmeter-timeline'\n\nexport class Scrollmeter extends IScrollmeter {\n    #defaultOptions: ScrollmeterOptions\n    #targetContainer: HTMLElement | null\n    #scrollmeterContainer: HTMLDivElement | null\n    #scrollmeterBar: HTMLDivElement | null\n    #resizeObserver: ResizeObserver | null\n\n    #timelineElements: HTMLElement[]\n\n    #captureCanvas: HTMLCanvasElement | null\n\n    #containerHeight: number\n    #barWidth: number\n    #totalHeight: number\n    #elementTop: number\n    #highestZIndex: number\n\n    constructor(options: ScrollmeterOptions) {\n        super()\n        const { targetId } = options\n        this.#defaultOptions = options\n\n        this.#targetContainer = document.getElementById(targetId) ?? null\n        this.#scrollmeterContainer = null\n        this.#scrollmeterBar = null\n        this.#resizeObserver = null\n        this.#captureCanvas = null\n\n        this.#timelineElements = []\n\n        // 숫자 필드 초기화\n        this.#containerHeight = 0\n        this.#barWidth = 0\n        this.#totalHeight = 0\n        this.#elementTop = 0\n        this.#highestZIndex = 0\n\n        this.#initResizeObserver()\n    }\n\n    #initResizeObserver = () => {\n        if (!this.#targetContainer) {\n            throw new Error('targetContainer is not found')\n        }\n\n        this.#resizeObserver = new ResizeObserver(async (entries) => {\n            if (!this.#targetContainer) return\n\n            if (!this.#scrollmeterContainer || this.#containerHeight === entries[0].contentRect.height) return\n\n            this.#containerHeight = entries[0].contentRect.height\n\n            const marginTop = parseInt(window.getComputedStyle(this.#targetContainer).marginTop)\n            const marginBottom = parseInt(window.getComputedStyle(this.#targetContainer).marginBottom)\n            this.#elementTop = window.scrollY + this.#targetContainer.getBoundingClientRect().top\n            this.#totalHeight = this.#targetContainer.clientHeight + marginTop + marginBottom - document.documentElement.clientHeight\n\n            this.#updateBarWidth()\n\n            if (this.#defaultOptions.useTimeline) {\n                document.querySelectorAll(`.${styles.scrollmeter_timeline}`).forEach((element) => {\n                    element.remove()\n                })\n\n                if (this.#defaultOptions.usePreview) {\n                    await this.#captureContainer()\n                }\n\n                const timeline = new ScrollmeterTimeline(this)\n\n                this.#timelineElements = timeline.createTimeline(this.#highestZIndex)\n            }\n        })\n    }\n\n    #createScrollmeterContainer = () => {\n        try {\n            if (!this.#targetContainer) throw new Error('targetContainer is not found')\n\n            const scrollmeterContainer = document.createElement('div') as HTMLDivElement\n            scrollmeterContainer.classList.add(styles.scrollmeter_container)\n\n            const highestZIndex = this.#findHighestZIndex(this.#targetContainer)\n            this.#highestZIndex = highestZIndex\n            scrollmeterContainer.style.zIndex = highestZIndex.toString()\n\n            const scrollmeterBar = this.#createScrollmeterBar()\n            scrollmeterContainer.appendChild(scrollmeterBar)\n\n            this.#scrollmeterContainer = scrollmeterContainer\n\n            this.setCSSCustomProperties()\n\n            return scrollmeterContainer\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    #createScrollmeterBar = () => {\n        const scrollmeterBar = document.createElement('div')\n        scrollmeterBar.classList.add(styles.scrollmeter_bar)\n\n        this.#scrollmeterBar = scrollmeterBar\n\n        return scrollmeterBar\n    }\n\n    #findHighestZIndex = (element: HTMLElement) => {\n        let highest = 0\n\n        const zIndex = window.getComputedStyle(element).zIndex\n\n        if (zIndex !== 'auto') {\n            highest = Math.max(highest, parseInt(zIndex))\n        }\n\n        Array.from(element.children).forEach((child) => {\n            highest = Math.max(highest, this.#findHighestZIndex(child as HTMLElement))\n        })\n\n        return highest + 1\n    }\n\n    #updateBarWidth = () => {\n        if (!this.#targetContainer) return\n        const isVisibleScrollmeter = this.#isVisibleScrollmeter()\n\n        if (!isVisibleScrollmeter) {\n            this.#scrollmeterContainer!.style.opacity = '0'\n            return\n        }\n\n        this.#scrollmeterContainer!.style.opacity = '1'\n\n        const currentScroll = window.scrollY - this.#elementTop\n        const scrollPercentage = (currentScroll / this.#totalHeight) * 100\n\n        this.#barWidth = Math.min(100, Math.max(0, scrollPercentage))\n\n        if (this.#scrollmeterBar) {\n            this.#scrollmeterBar.style.width = `${this.#barWidth}%`\n        }\n    }\n\n    #isVisibleScrollmeter = () => {\n        if (!this.#targetContainer) return false\n\n        return this.#targetContainer.getBoundingClientRect().top < 0 && this.#targetContainer.getBoundingClientRect().bottom > 0\n    }\n\n    #captureContainer = async () => {\n        if (!this.#targetContainer) return\n\n        try {\n            const canvas = await html2canvas(document.documentElement, {\n                ignoreElements: (element) => {\n                    const ignoreClasses = [styles.scrollmeter_container]\n                    return ignoreClasses.some((className) => element.classList.contains(className))\n                },\n            })\n\n            this.#captureCanvas = canvas\n        } catch (error) {\n            console.error('미리보기를 생성하는 중 오류가 발생했습니다:', error)\n        }\n    }\n\n    protected setCSSCustomProperties = () => {\n        if (!this.#scrollmeterContainer) return\n        // css custom\n        if (this.#defaultOptions.barOptions) {\n            const { color, background, height } = this.#defaultOptions.barOptions\n            if (color) {\n                this.#scrollmeterContainer.style.setProperty('--scrollmeter-bar-color', color)\n            }\n            if (background) {\n                this.#scrollmeterContainer.style.setProperty('--scrollmeter-bar-background', background)\n            }\n            if (height) {\n                this.#scrollmeterContainer.style.setProperty('--scrollmeter-bar-height', `${height}px`)\n            }\n        }\n    }\n\n    public createScrollmeter = () => {\n        try {\n            if (!this.#targetContainer) throw new Error('targetContainer is not found')\n\n            const existingScrollmeter = document.querySelectorAll(`.${styles.scrollmeter_container}`)\n\n            if (existingScrollmeter.length > 0) {\n                return null\n            }\n\n            if (!this.#resizeObserver) {\n                throw new Error('resizeObserver is not found')\n            }\n\n            const container = this.#createScrollmeterContainer()\n\n            if (!container) throw new Error('scrollmetercontainer is not found')\n\n            this.#targetContainer.appendChild(container)\n\n            this.#resizeObserver.observe(this.#targetContainer)\n\n            window.addEventListener('scroll', this.#updateBarWidth)\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    public getTargetContainer = () => {\n        return this.#targetContainer\n    }\n\n    public getScrollmeterContainer = () => {\n        return this.#scrollmeterContainer\n    }\n\n    public getCaptureCanvas = () => {\n        return this.#captureCanvas || null\n    }\n\n    public getDefaultOptions = () => {\n        return this.#defaultOptions\n    }\n}\n","import { Scrollmeter } from './class/scrollmeter'\nimport { ScrollmeterOptions } from './types/scrollmeter.types'\n\nexport const createScrollmeter = (options: ScrollmeterOptions) => {\n    const scrollmeter = new Scrollmeter(options)\n    scrollmeter.createScrollmeter()\n}\n"],"names":["IScrollmeter","ScrollmeterTooltip","scrollmeter","__privateAdd","_scrollmeter","_cropImageAtPercent","_createPreview","__privateSet","targetElement","cropWidth","captureCanvas","__privateGet","canvasWidth","canvasHeight","y","cropHeight","tempCanvas","ctx","dataUrl","div","styles","img","timelineElement","direction","timelineTooltip","timelineTooltipText","preview","defaultOptions","background","fontColor","fontSize","paddingBlock","paddingInline","width","_a","_b","_c","_d","_e","_f","ScrollmeterTimeline","_ScrollmeterTimeline_instances","_findTimelineElements","element","elArray","searchH1","el","__privateMethod","isElementVisible_fn","child","highestZIndex","targetContainer","timelineElements","scrollContainer","absoluteElementTop","absoluteContainerTop","relativeTargetTop","scrollableHeight","relativePosition","color","style","currentElement","parentStyle","Scrollmeter","options","_defaultOptions","_targetContainer","_scrollmeterContainer","_scrollmeterBar","_resizeObserver","_timelineElements","_captureCanvas","_containerHeight","_barWidth","_totalHeight","_elementTop","_highestZIndex","_initResizeObserver","_createScrollmeterContainer","_createScrollmeterBar","_findHighestZIndex","_updateBarWidth","_isVisibleScrollmeter","_captureContainer","entries","marginTop","marginBottom","timeline","scrollmeterContainer","scrollmeterBar","error","highest","zIndex","scrollPercentage","canvas","html2canvas","className","height","container","targetId","createScrollmeter"],"mappings":"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"}